in the:
char	*ft_i_to_s(int nb, char *base_to, int base_n, int i)
{
	char	*result;

	if (nb < 0)
	{
		result = (char*)malloc(sizeof(*result) * (i + 2));
		result[0] = '-';
		result[i + 1] = '\0';
		while (--i + 1 > 0)
		{
			result[i + 1] = base_to[base_n - nb % base_n];
			nb = nb / base_n;
		}
	}
	else
	{
		result = (char*)malloc(sizeof(*result) * (i + 1));
		result[i] = '\0';
		while (--i >= 0)
		{
			result[i] = base_to[nb % base_n];
			nb = nb / base_n;
		}
	}
	return (result);
}

function, result[i + 1] = base_to[base_n - nb % base_n], has some problem. 
suppose base is 10, then the range of base_n - nb % base_n will be 1 to 10, which will be out the index range of the array.

in math, -8 % 10 = 2, (calculate in google)
but in c, -8 % 10 = -8, therefore, the more correct way to do it is (nb % base_n * -1)